#!/bin/bash

# some more ls aliases
alias ll='ls -lh'
alias la='ls -A'
alias l='ls -CF'
alias emacs='emacs -nw'
# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

### Filesystem Aliases ###
mkcd() { mkdir $1 ;  cd $1 ; }
rmdir  () { rm -rf "$@" ;       }
follow () { cp $1 $2 ; cd $2 ;  }

grepall (){ grep -rn $1 ./* --color=always; }

# tmux aliases
alias ta='tmux attach'

# git Aliases #
list_authors='git log --format='%aN' | sort -u'
alias gs='git status'
alias gpo='git push origin'
alias gpu='git push upstream'
alias gfo='git fetch origin'
alias gfu='git fetch upstream'
alias gt='cd $(git rev-parse --show-toplevel)'
alias git-clean-reset='git reset --hard HEAD && git clean -dxf'

# external ip alias #
alias wanip='dig +short myip.opendns.com @resolver1.opendns.com'

# make system aliases #
alias cb='make clean; make -j8'
alias cbi='make clean; make -j8 && make install'
alias cbc='make clean && make -j 8 && make -j 8 check'
alias cbt='make clean && make -j 8 && make test'
alias ch='make -j 8 check'
alias bci='make -j8 check && make -j8 install'
alias bi='make -j8 install'

#########################################
### Mount/UnMount remote directories ####
#########################################
function remmnt {

    if [ "$#" -eq 2 -o "$#" -gt 3 ]
    then
	echo "Function is designed for 1 or 3 arguments."
	return 1
    fi

    if [ "$#" -gt 2 ]
    then
	if [ "$2" != "as" ]
	then
	    echo "Please use the following format to set remote filesystems: "
	    echo "remmnt <hostname> as <desired_name>"
	    return 1
	fi
	echo "Using third argument to set directory name."
	if [ ! -d ~/mnt/$3 ]; then mkdir -p ~/mnt/$3; fi
	if [ "$(ls -A ~/mnt/$3)" ]; then echo "Destination directory is not empty. Exiting..." ; exit 1; fi
	sshfs -oauto_cache,reconnect $1:/ ~/mnt/$3
	if [ $? -ne 0 ]; then echo "Mount failed. Removing intended destination directory..."; rmdir ~/mnt/$3; fi
    else
	if [ ! -d ~/mnt/$1 ]; then mkdir -p ~/mnt/$1; fi
	if [ "$(ls -A ~/mnt/$1)" ]; then echo "Destination directory is not empty. Exiting..." ; exit 1; fi
	sshfs -oauto_cache,reconnect $1:/ ~/mnt/$1
	if [ $? -ne 0 ]; then echo "Mount failed. Removing intended destination directory..."; rmdir ~/mnt/$1; fi
    fi
}

function remumnt () {
    if fusermount -u ~/mnt/$1; then
	rmdir ~/mnt/$1
    else
	if [ "$(ls -A ~/mnt/$1)" ] ; then
	    echo "Could not unmount. Files exist in directory. Please investigate further."
	else
	    read -p "Could not unmount. Directory is empty. Remove dir? [y/n] " -n 1 -r
	    echo
	    if [[ $REPLY =~ ^[Yy]$ ]]; then
		rmdir ~/mnt/$1
	    fi
	fi
    fi
}

#### End Mount Section ###

#########
# MEDIA #
#########

### Pandora Stuff (relies on pianobar) ###
function pandora() {

#check to see if a pandora tmux session is already in existence
if [ 0 -eq "$(tmux list-sessions | grep pandora | wc -l )" ] ; then
    #create a pandora tmux and enter it
    echo "Creating tmux for pandora..."
    tmux new -s pandora pianobar
else
    echo "Entering pandora..."
    tmux a -t pandora
fi

}

### mps-youtube Stuff (relies on pianobar) ###
function ytube() {

#check to see if a mpsyt tmux session is already in existence
if [ 0 -eq "$(tmux list-sessions | grep ytube | wc -l )" ] ; then
    #create a mpsyt tmux and enter it
    echo "Creating tmux for mpsyt..."
    tmux new -s ytube "PYTHONPATH=/home/shriwise/.local/lib/python3.3/site-packages:$PYTHONPATH mpsyt"
else
    echo "Entering mpsyt..."
    tmux a -t ytube
fi

}

function pnext () { tmux send -t pandora n; tmux send -t ytube "Enter"; }

function ppause() { tmux send -t pandora p; tmux send -t ytube p; }

function pquit () { tmux send -t pandora q; tmux send -t ytube "q";
		    tmux send -t ytube "exit"; tmux send -t ytube "Enter"; }

function pplay () { tmux send -t pandora p; tmux send -t ytube p; }


function set-title() {
  TITLE="\033];$*\007"
  echo -e ${TITLE}
}

export TRAVIS_TOKEN=AZto9_eZf3lNw28shUfaGw

export PATH=$HOME/.bash/bin:$PATH

#######################
### ADD SSH ALIASES ###
#######################
source $HOME/.bash/ssh/ssh_aliases

###################################
# MACHINE SPECIFIC CONFIGURATIONS #
###################################
source $HOME/.bash/machines/machinesrc

##################################
# CHECK CONFIGURATION UP TO DATE #
##################################
($HOME/.bash/common/check_config &)
