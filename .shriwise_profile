#!/bin/bash

### Include Git Aware Prompt ###

export GITAWAREPROMPT=~/.bash/
source $GITAWAREPROMPT/main.sh
export PS1="${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\\[$txtcyn\]\$git_branch\[$txtred\]\$git_dirty\[$txtrst\]:\$ "

# some more ls aliases
alias ll='ls -lh'
alias la='ls -A'
alias l='ls -CF'

### Filesystem Aliases ###

mkcd () { mkdir $1 ;  cd $1 ; }
rmdir () { rm -rf "$@"; }

alias cch='make clean && make -j 32 && make -j 8 check'
alias ch='make -j 8 check'


follow () { cp $1 $2 ; cd $2 ; }

### End Filesystem Section ###

#keybinding addition
if [ $TERM == "xterm" ]; then
    bind '"\C-H":backward-kill-word'
fi

#Infinite history
export HISTSIZE=
export HISTFILESIZE=

# ssh Aliases
alias tux='ssh -X cae'
alias tower='ssh -X home'
alias hova='ssh -X hova'
alias ff='ssh -X serenity'
alias ta='tmux attach'
alias clc='clear; l'
alias ec2='ssh ec2'
alias ec2p='ssh ec2p'

#Notebook Aliases
function notebook {

    if [ -d ~/Documents/personal/notebook/ ]; then 
	have_jekyll=$(which jekyll | wc -l)
	if [ $have_jekyll != 0 ]; then
#	    tmux start-server
	    tmux new-session -d 'cd ~/Documents/personal/notebook/ && jekyll serve -u'
	    echo "Notebook server started."
	    return 0
	else
	    echo "Please install jekyll."
	    return 1
	fi
    else
	echo "Could not locate notebook directory"
	return 1
	fi
}
   

#Workout Aliases
if [ -d ~/Dropbox ]; then

alias viewworkout='cd ~/Dropbox/Workouts/ &&  python View_Workout.py'
alias editworkout='cd ~/Dropbox/Workouts/EW'

fi

#Application Aliases
alias Q104='mplayer http://208.92.55.51:3690/KBEQFMAAC'
alias Chill='mplayer http://listen.di.fm/public3/chilloutdreams.pls'

###git aliases###

list_authors='git log --format='%aN' | sort -u'


### Mount/UnMount remote directories ####

function remmnt {

if [ "$#" -eq 2 -o "$#" -gt 3 ]
then 
    echo "Function is designed for 1 or 3 arguments."
    return 1
fi

if [ "$#" -gt 2 ]
then
    if [ "$2" != "as" ] 
    then 
	echo "Please use the following format to set remote filesystems: "
	echo "remmnt <hostname> as <desired_name>"
	return 1
    fi
    echo "Using third argument to set directory name."
    if [ ! -d ~/mnt/$3 ]; then mkdir -p ~/mnt/$3; fi
    sshfs $1:/ ~/mnt/$3
    if [ $? -ne 0 ]; then echo "Mount failed. Removing intended destination directory..."; rmdir ~/mnt/$3; fi
else
    if [ ! -d ~/mnt/$1 ]; then mkdir -p ~/mnt/$1; fi
    sshfs -oauto_cache,reconnect,defer_permissions,noappledouble $1:/ ~/mnt/$1
    if [ $? -ne 0 ]; then echo "Mount failed. Removing intended destination directory..."; rmdir ~/mnt/$1; fi
fi 

 
}

function remumnt () { fusermount -u ~/mnt/$1 && rmdir ~/mnt/$1 ; }

. ~/.bash/bash_completion/remumnt

#### End Mount Section ###


export -f remmnt
