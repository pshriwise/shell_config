#!/bin/bash

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples


# If not running interactively, don't do anything
#case $- in
#      *i*) ;;
#      *) return;;
#esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes


if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
# unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# PATH
function norm_path {
    PATH=/home/shriwise/opt/miniconda2/bin
    PATH=/home/shriwise/opt/embree/:$PATH
PATH=/home/shriwise/occ_blds/occ/:$PATH
PATH=/home/shriwise/opt/oce/:$PATH
PATH=/home/shriwise/opt/ispc/:$PATH
PATH=$PATH:/usr/local/lib/:/usr/lib/:/usr/local/bin/:/bin/:/usr/bin/:/usr/include/:/usr/share/
PATH=/usr/games/:$PATH
PATH="/home/shriwise/.local/bin:${PATH}"
}


#LD_LIBS

function norm_ld_libs {

# Triangle
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/xtr/triangle/include/

#Embree
LD_LIBRARY_PATH=$HOME/opt/embree/lib/:$LD_LIBRARY_PATH

#McCAD
LD_LIBRARY_PATH=/home/shriwise/opt/mccad/lib/:$LD_LIBRARY_PATH

#TBB
LD_LIBRARY_PATH=/home/shriwise/opt/tbb/lib/:$LD_LIBRARY_PATH

#OSPRAY
LD_LIBRARY_PATH=/home/shriwise/opt/ospray/bld/:$LD_LIBRARY_PATH

#OCE
LD_LIBRARY_PATH=/home/shriwise/opt/oce/lib/:$LD_LIBRARY_PATH
}

###########################################
## FUNCTIONS FOR SIGMA ENVIRONMENT SETUP ##
###########################################

function facet_build {

CUBITS_PATH=/home/shriwise/Cubits
DAGMC_PATH=/home/shriwise/opt/facet_bld/

#Cubit
CUBIT_PATH=$CUBITS_PATH/12.2/
LD_LIBRARY_PATH=$CUBIT_PATH/bin/

alias cubit='$CUBIT_PATH/bin/clarox -nojournal'

#CGM
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$DAGMC_PATH/cgm/lib

#MOAB
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$DAGMC_PATH/moab/lib
export MOAB_MAKE=$DAGMC_PATH/moab/lib/moab.make
#HDF5
LD_LIBRARY_PATH=$DAGMC_PATH/hdf5/lib/:$LD_LIBRARY_PATH

#setup the normal path and add the specific hdf5 path to it
norm_path
PATH=$DAGMC_PATH/hdf5/lib:$PATH

mbsize () { $DAGMC_PATH/moab/bin/mbsize $@ ; }
mbconvert () { $DAGMC_PATH/moab/bin/mbconvert $@ ; }
dagmc_preproc () { $DAGMC_PATH/moab/bin/dagmc_preproc $@ ; }
make_watertight () { $DAGMC_PATH/meshkit/bin/make_watertight $@ ; }
check_watertight () { $DAGMC_PATH/meshkit/bin/check_watertight $@ ; }

#setup the normal paths for the LD_LIBRARY_PATH env var
norm_ld_libs

export PATH
export LD_LIBRARY_PATH

echo "Environment set for sigma tools build w/ Cubit12.2 (for robust facets)"

}



function cubit_sigma {

CUBITS_PATH=/home/shriwise/Cubits
DAGMC_PATH=/home/shriwise/dagmc_blds

#Cubit
CUBIT_PATH=$CUBITS_PATH/14/
LD_LIBRARY_PATH=$CUBIT_PATH/bin/

alias cubit='$CUBIT_PATH/bin/clarox -nojournal'

#CGM
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$DAGMC_PATH/cgm_dev/lib
export CGM_MAKE=$DAGMC_PATH/cgm_dev/lib/cgm.make
#EMDAG
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$DAGMC_PATH/emdag/bld/src/

#DAGMC
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$DAGMC_PATH/dagmc/lib/ 

#MOAB
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$DAGMC_PATH/moabs/lib
export MOAB_MAKE=$DAGMC_PATH/moabs/lib/moab.make
export MOAB_PATH=$DAGMC_PATH/moabs/
#HDF5
LD_LIBRARY_PATH=$DAGMC_PATH/hdf5/lib/:$LD_LIBRARY_PATH

#setup the normal path and add the specific hdf5 path to it
norm_path
PATH=$DAGMC_PATH/hdf5/lib:$PATH

#LASSO
#LD_LIBRARY_PATH=$DAGMC_PATH/lasso/lib:$LD_LIBRARY_PATH

#MESHKIT
LD_LIBRARY_PATH=$DAGMC_PATH/meshkit/lib:$LD_LIBRARY_PATH
export MK_MAKE=$DAGMC_PATH/meshkit/lib/meshkit.make


mbsize () { $DAGMC_PATH/moabs/bin/mbsize $@ ; }
mbconvert () { $DAGMC_PATH/moabs/bin/mbconvert $@ ; }
dagmc_preproc () { $DAGMC_PATH/moabs/bin/dagmc_preproc $@ ; }
make_watertight () { $DAGMC_PATH/meshkit/bin/make_watertight $@ ; }
make_watertight () { $DAGMC_PATH/meshkit/bin/check_watertight $@ ; }

#setup the normal paths for the LD_LIBRARY_PATH env var
norm_ld_libs

export PATH
export LD_LIBRARY_PATH

echo "Environment set for sigma tools built w/ Cubit"

}

function occ_sigma {

DAGMC_PATH=/home/shriwise/occ_blds

#OCC
LD_LIBRARY_PATH=/home/shriwise/occ_blds/occ/lib/
LD_LIBRARY_PATH=/home/shriwise/opt/oce/lib/

alias cubit='echo Currently in occ-based environment. No Cubit allowed.'

#CGM
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$DAGMC_PATH/cgm/lib

#MOAB
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$DAGMC_PATH/moab/lib
export MOAB_MAKE=$DAGMC_PATH/moab/lib/moab.make

#HDF5
LD_LIBRARY_PATH=$DAGMC_PATH/hdf5/lib/:$LD_LIBRARY_PATH

#setup the normal path variable
norm_path
PATH=$DAGMC_PATH/hdf5/lib:$PATH

#LASSO
LD_LIBRARY_PATH=$DAGMC_PATH/lasso/lib:$LD_LIBRARY_PATH

#MESHKIT
LD_LIBRARY_PATH=$DAGMC_PATH/meshkit/lib:$LD_LIBRARY_PATH
export MK_MAKE=$DAGMC_PATH/meshkit/lib/meshkit.make

mbsize () { $DAGMC_PATH/moab/bin/mbsize $@ ; }
mbconvert () { $DAGMC_PATH/moab/bin/mbconvert $@ ; }
dagmc_preproc () { $DAGMC_PATH/moab/bin/dagmc_preproc $@ ; }
make_watertight () { $DAGMC_PATH/meshkit/bin/make_watertight $@ ; }
check_watertight () { $DAGMC_PATH/meshkit/bin/check_watertight $@ ; }

#setup the normal paths for the LD_LIBRARY_PATH env var
norm_ld_libs

export LD_LIBRARY_PATH
export PATH

echo "Environment set for sigma tools built w/ occ."

}


function prod_sigma {

CUBITS_PATH=/home/shriwise/Cubits
DAGMC_PATH=/home/shriwise/opt/dagmc_bld/ 

#CUBIT
CUBIT_PATH=$CUBITS_PATH/14/
LD_LIBRARY_PATH=$CUBIT_PATH/bin

alias cubit='$CUBIT_PATH/bin/clarox -nojournal'

#CGM
LD_LIBRARY_PATH=$DAGMC_PATH/cgm/lib/:$LD_LIBRARY_PATH
#HDF5
LD_LIBRARY_PATH=$DAGMC_PATH/hdf5/lib/:$LD_LIBRARY_PATH
export HDF5_ROOT=$DAGMC_PATH/hdf5/

norm_path
PATH=$DAGMC_PATH/hdf5/lib:$PATH

#MOAB
LD_LIBRARY_PATH=$DAGMC_PATH/moab/lib/:$LD_LIBRARY_PATH
export CMAKE_INCLUDE_PATH=$DAGMC_PATH/moab/include/
export CPLUS_INCLUDE_PATH=$DAGMC_PATH/moab/include/
export MOAB_MAKE=$DAGMC_PATH/moab/lib/moab.make

#MESHKIT 
### Not currently built, set null env var ###
unset MK_MAKE

#DAGMC
LD_LIBRARY_PATH=$DAGMC_PATH/dagmc/lib/:$LD_LIBRARY_PATH

#DATAPATH FOR XSDIR
export DATAPATH=/home/shriwise/opt/LANL/mcnp_data/

mbsize () { $DAGMC_PATH/moab/bin/mbsize $@ ; }
mbconvert () { $DAGMC_PATH/moab/bin/mbconvert $@ ; }
dagmc_preproc () { $DAGMC_PATH/moab/bin/dagmc_preproc $@ ; }
make_watertight () { $DAGMC_PATH/moab_tools/make_watertight/make_watertight $@ ; }
check_watertight () { $DAGMC_PATH/moab_tools/make_watertight/check_watertight $@ ; }

#setup the normal paths for the LD_LIBRARY_PATH env var
norm_ld_libs

export LD_LIBRARY_PATH
export PATH

echo "Environment set for production sigma tools."

}

#######################################################
##LD_LIBRARY_PATH FOR NORMAL 'source ~/.bashrc' HERE###
# if sourcing this file, setup for production work
cubit_sigma
#######################################################


# ALIASES
visit () { /home/shriwise/opt/visit/visit2_11_0.linux-x86_64/bin/visit $@ ; }
h5ls () { /home/shriwise/dagmc_blds/hdf5/bin/h5ls $@ ; }
matlab () { /usr/local/bin/matlab $@ ; }
zo () { /home/shriwise/opt/zo/zo.py $@ ; }

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
function ll () { ls -alF "$@" ; }
function la () { ls -A "$@"  ; }
function l () { ls -CF "$@" ; }
alias emacs='emacs -nw'
function up () { cd ../ "$@" ; }

#function mpsyt() {
#    
# mpsyt_exists=$(tmux list-sessions | grep mpsyt | wc -l)
#
# if [ $mpsyt_exists -eq 0 ]; then
#     tmux new -s mpsyt 'mpsyt'
# else
#     tmux a -t mpsyt
# fi
#}
     
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

function c1 () { ssh shriwise@tux-c1.cae.wisc.edu ; }
function c2 () { ssh shriwise@tux-c2.cae.wisc.edu ; }
function tt () { ssh shriwise@128.104.186.9 ; }
export TT=shriwise@128.104.186.9

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
alias trelis=/opt/Trelis-16.0/bin/trelis

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if [ -f ~/.bash/.shriwise_profile ]; then
    . ~/.bash/.shriwise_profile
fi


# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


notify () { $@; paplay /usr/share/sounds/gnome/default/alerts/bark.ogg; notify-send "$1 is complete"; }

          # -------------------------------------------------
          # set shell environment variables for MCNP5

          #  PATH="/home/shriwise/opt/MCNP5//LANL/MCNP5/bin:$PATH"

          # set shell environment variable  for MCNP_DAA
          #  DATAPATH="/home/shriwise/opt/MCNP5//LANL/MCNP_DATA"
          # -------------------------------------------------


ssh-add -k ~/.ssh/pshriwise.pem 2&> /dev/null

export PYTHONPATH=/home/shriwise/.local/lib/python2.7/site-packages/:/home/shriwise/opt/slackbot/:/opt/Trelis-16.0/bin/:/home/shriwise/.local/bin/
export COWPATH=/home/shriwise/.bash/:/usr/share/cowsay/cows/

#alias dagmc_preproc='python ~/.local/bin/dagmc_preproc.py'
