#!/bin/bash

# convenience for exporting environment variables together
function export_environment_vars() {
    export PATH
    export LD_LIBRARY_PATH
}

function env_siggraph() {
    export PATH=$HOME/opt/siggraph_rt/moab/bin:$PATH
    export PATH=$HOME/opt/siggraph_rt/dagmc/bin:$PATH
    export PATH=$HOME/opt/siggraph_rt/openmc/bin:$PATH
    export OPENMC_CROSS_SECTIONS=$HOME/opt/openmc/xs/nndc_hdf5/cross_sections.xml

    export PYTHONPATH=$HOME/opt/siggraph_rt/moab/lib/python3.8/site-packages/:$PYTHONPATH

    pyenv shell 3.8.1

    echo "Environment set for SIGGRAPH testing."
}

function env_xdg_benchmarking() {
    export OPENMC_CROSS_SECTIONS=~/data/xs/openmc/endfb-viii.0-hdf5/cross_sections.xml
    pyenv shell 3.12.0
}

function env_openfoam_dev() {

    export MPI_ARCH_INC="-I/usr/include/mpich -L/usr/lib/x86_64-linux-gnu"
    export MPI_ARCH_LIBS="-L/usr/lib/x86_64-linux-gnu -lmpich"
    export MPI_ARCH_FLAGS="-Wl,-Bsymbolic-functions -Wl,-z,relro"
    export MPI_ROOT=/usr
    export WM_MPLIB=SYSTEMMPI

    source $HOME/opt/OpenFOAM-dev/etc/bashrc

    export PATH=$HOME/opt/opt/paraview/ParaView-5.9.0-RC1-MPI-Linux-Python3.8-64bit/bin:$PATH
}

function env_enrico() {
    export FC=/usr/bin/mpifort
    export F90=/usr/bin/mpif90
    export CXX=/usr/bin/mpic++
    export CC=/usr/bin/mpicc
    export HDF5_ROOT=/usr/lib/x86_64-linux-gnu/hdf5/serial/

    export OPENMC_CROSS_SECTIONS=$HOME/opt/openmc/xs/lib80x_hdf5/cross_sections.xml
}

function env_moose_compile() {
    # set environment for conda MPI compilers
    export MPICH_FC=gfortran
    export HDF5_ROOT=/usr/lib/x86_64-linux-gnu/hdf5/mpich/
    export NEKRS_HOME=$HOME/opt/cardinal/install/
    export MOOSE_DIR=$HOME/opt/cardinal/contrib/moose
}

function env_aurora() {
    env_moose_compile()
    export PATH=$HOME/opt/aurora/soft/bin:$HOME/opt/aurora/src/aurora:$PATH
    export MOOSE_LIBRARY_PATH=/home/pshriwise/opt/aurora/src/aurora/openmc/lib/
    export OPENMC_CROSS_SECTIONS=$HOME/opt/openmc/xs/endfb71_hdf5/cross_sections.xml
    export PYTHONPATH=$HOME/opt/aurora/soft/lib/python3.9/site-packages:$PYTHONPATH
    pyenv shell 3.9.1-aurora
}

function env_cardinal_common() {
    if [ -z "$CARDINAL_DIR" ]; then echo "CARDINAL_DIR IS UNSET"; return; fi
    # make sure the MOOSE library links to the right libmesh library at runtime
    export LD_LIBRARY_PATH=$CARDINAL_DIR/contrib/moose/libmesh/installed/lib:$LD_LIBRARY_PATH
    # make sure cardinal finds the right OpenMC library at runtime
    export LD_LIBRARY_PATH=$CARDINAL_DIR/install/lib:$LD_LIBRARY_PATH
    export NEKRS_HOME=$CARDINAL_DIR/install
    export MOOSE_DIR=$CARDINAL_DIR/contrib/moose
    export PYTHONPATH=$MOOSE_DIR/python:$PYTHONPATH
    export PYTHONPATH=$CARDINAL_DIR/contrib/openmc:$PYTHONPATH
    export PATH=$CARDINAL_DIR:$PATH
    export PATH=$CARDINAL_DIR/install/bin:$PATH

    # Compilation Variables
    export JOBS=20
    export MOOSE_JOBS=$JOBS
    export LIBMESH_JOBS=20
    export METHOD=opt

    # OpenMC DATA
    export OPENMC_XS_DIR=$HOME/data/xs/openmc
    export OPENMC_CROSS_SECTIONS=$OPENMC_XS_DIR/endfb-vii.1-hdf5/cross_sections.xml
}

function env_cardinal() {
    export CARDINAL_DIR=$HOME/soft/cardinal
    env_cardinal_common
}

function env_pygriffin() {
    export PATH=$HOME/opt/griffin/:$PATH
    export PYTHONPATH=$HOME/opt/griffin/moose/python:$PYTHONPATH
    pyenv shell 3.7.3-pygriffin
}

function env_openmc() {
    # EXECUTABLES
    PATH=$HOME/opt/openmc/bin:$PATH
    PATH=$HOME/opt/moab/bin:$PATH
    PATH=$HOME/opt/dagmc/bin:$PATH
    PATH=$HOME/opt/h5sh/:$PATH

    # SHARED LIBRARIES
    LD_LIBRARY_PATH=$HOME/opt/libmesh/lib/:$LD_LIBRARY_PATH
    LD_LIBRARY_PATH=$HOME/opt/dagmc/lib:$LD_LIBRARY_PATH
    LD_LIBRARY_PATH=$HOME/opt/moab/lib:$LD_LIBRARY_PATH

    # NUCLEAR DATA
    export OPENMC_CROSS_SECTIONS=$HOME/opt/openmc/xs/nndc_hdf5/cross_sections.xml
    export OPENMC_ENDF_DATA=$HOME/opt/openmc/xs/endf-b-vii.1/

    # PYMOAB
    export PYTHONPATH=$HOME/opt/moab/lib/python3.7/site-packages:$PYTHONPATH

    pyenv shell 3.11.7

    export_environment_vars
    echo "Added OpenMC to environment"
}

function env_dag_openmc_cmp() {
    # EXECUTABLES
    PATH=$HOME/dag_openmc_cmp/miniconda3/envs/openmc_umesh/bin:$PATH
    PATH=$HOME/dag_openmc_cmp/opt/openmc/bin:$PATH
    PATH=$HOME/dag_openmc_cmp/opt/moab/bin:$PATH
    PATH=$HOME/dag_openmc_cmp/opt/dagmc/bin:$PATH
    PATH=$HOME/dag_openmc_cmp/opt/h5sh/:$PATH

    # SHARED LIBRARIES
    LD_LIBRARY_PATH=$HOME/dag_openmc_cmp/miniconda3/envs/openmc_umesh/lib:$LD_LIBRARY_PATH
    LD_LIBRARY_PATH=$HOME/dag_openmc_cmp/opt/libmesh/lib/:$LD_LIBRARY_PATH
    LD_LIBRARY_PATH=$HOME/dag_openmc_cmp/opt/dagmc/lib:$LD_LIBRARY_PATH
    LD_LIBRARY_PATH=$HOME/dag_openmc_cmp/opt/moab/lib:$LD_LIBRARY_PATH

    # NUCLEAR DATA
    export OPENMC_CROSS_SECTIONS=/home/pshriwise/dag_openmc_cmp/opt/openmc/xs/lib80x_hdf5/cross_sections.xml
    export OPENMC_ENDF_DATA=$HOME/dag_openmc_cmp/opt/openmc/xs/endf-b-vii.1/

    # PYMOAB
    export PYTHONPATH=$HOME/dag_openmc_cmp/opt/moab/lib/python3.7/site-packages:$PYTHONPATH

    export_environment_vars

    echo "Added OpenMC to environment"

    conda activate dag_openmc_cmp
    echo "Activated OpenMC w/ DAGMC comparison environment (installs in $HOME/dag_openmc_cmp)"
}

function env_delta () {
    # EXECUTABLES
    PATH=$HOME/delta_tracking/opt/openmc/bin:$PATH

    # SHARED LIBRARIES
    LD_LIBRARY_PATH=$HOME/delta_tracking/miniconda3/envs/openmc_umesh/lib:$LD_LIBRARY_PATH

    # NUCLEAR DATA
    export OPENMC_CROSS_SECTIONS=/home/pshriwise/delta_tracking/opt/openmc/xs/nndc_hdf5/cross_sections.xml
    export OPENMC_ENDF_DATA=$HOME/delta_tracking/opt/openmc/xs/endf-b-vii.1/

    export_environment_vars

    echo "Added OpenMC to environment"

    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"

    if command -v pyenv 1>/dev/null 2>&1; then
        eval "$(pyenv init -)"
    fi

    pyenv shell 3.7.3
    echo "Activated OpenMC Delta Tracking dev environment (installs in $HOME/delta_tracking/opt)"
}

function env_ww_gen () {
    # EXECUTABLES
    PATH=$HOME/ww_gen/opt/bin:$PATH

    # NUCLEAR DATA
    export OPENMC_CROSS_SECTIONS=$HOME/ww_gen/data/xs/nndc_hdf5/cross_sections.xml
    export OPENMC_ENDF_DATA=$HOME/delta_tracking/opt/openmc/xs/endf-b-vii.1/

    export_environment_vars

    echo "Added OpenMC to environment"

    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"

    if command -v pyenv 1>/dev/null 2>&1; then
        eval "$(pyenv init -)"
    fi

    pyenv shell 3.9.2-ww-gen
    echo "Activated OpenMC Weight Window generation dev environment (installs in $HOME/ww_gen/opt)"
}


function env_mcnp {
    export DATAPATH=/opt/mcnp/6.2/MCNP_DATA/
    export PATH=/opt/mcnp/6.2/MCNP_CODE/bin/:$PATH
}

function env_conda {
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('/home/pshriwise/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/home/pshriwise/miniconda3/etc/profile.d/conda.sh" ]; then
            . "/home/pshriwise/miniconda3/etc/profile.d/conda.sh"
        else
            export PATH="/home/pshriwise/miniconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
}

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
fi
